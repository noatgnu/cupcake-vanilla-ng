version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: test_cupcake_vanilla_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  backend:
    build:
      context: ../cupcake_vanilla
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/test_cupcake_vanilla_db
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=false
      - DJANGO_SETTINGS_MODULE=cupcake_vanilla.settings.test
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - SECRET_KEY=test-secret-key-for-integration-testing-only
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../cupcake_vanilla:/app
      - backend_media:/app/media
      - backend_static:/app/static
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py loaddata fixtures/test_data.json || true &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - TEST_API_URL=http://backend:8000/api/v1
      - INTEGRATION_TEST_USER=integration_test@example.com
      - INTEGRATION_TEST_PASSWORD=test_password_123
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - test_results:/app/integration-test-results
      - coverage_results:/app/coverage
    command: npm run test:integration:coverage
    networks:
      - test-network

networks:
  test-network:
    driver: bridge

volumes:
  postgres_test_data:
  redis_test_data:
  backend_media:
  backend_static:
  test_results:
  coverage_results: