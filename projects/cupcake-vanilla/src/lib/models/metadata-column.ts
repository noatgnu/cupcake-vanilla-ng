import { BaseTimestampedModel } from './base';
import { OntologyType } from './enums';

export interface MetadataColumnModifier {
  samples: string; // e.g., "1,3-5,7"
  value: string;
}

export interface MetadataColumn extends BaseTimestampedModel {
  id: number;
  metadataTable: number;
  metadataTableName?: string; // computed field, not in model
  template?: number; // null=True, blank=True
  templateName?: string; // computed field, not in model
  name: string; // required
  type: string; // required
  columnPosition: number; // default=0
  value?: string; // null=True, blank=True
  notApplicable: boolean; // default=False
  mandatory: boolean; // default=False
  hidden: boolean; // default=False
  autoGenerated: boolean; // default=False
  readonly: boolean; // default=False
  modifiers: MetadataColumnModifier[]; // default=list
  ontologyType?: OntologyType; // null=True, blank=True
  ontologyOptions?: any; // null=True, blank=True
  suggestedValues: any[]; // default=list
  enableTypeahead: boolean; // default=True
  possibleDefaultValues: any[]; // default=list
  staffOnly: boolean; // default=False
}

export interface MetadataColumnCreateRequest {
  metadataTable: number;
  template?: number;
  name: string;
  type: string;
  columnPosition?: number; // Has default=0
  value?: string;
  notApplicable?: boolean; // Has default=False
  mandatory?: boolean; // Has default=False
  hidden?: boolean; // Has default=False
  autoGenerated?: boolean; // Has default=False
  readonly?: boolean; // Has default=False
  modifiers?: MetadataColumnModifier[]; // Has default=list
  ontologyType?: OntologyType;
  ontologyOptions?: any;
  enableTypeahead?: boolean; // Has default=True
  staffOnly?: boolean; // Has default=False
}

export interface MetadataColumnUpdateRequest {
  name?: string;
  type?: string;
  columnPosition?: number;
  value?: string;
  notApplicable?: boolean;
  mandatory?: boolean;
  hidden?: boolean;
  autoGenerated?: boolean;
  readonly?: boolean;
  modifiers?: MetadataColumnModifier[];
  ontologyType?: OntologyType;
  ontologyOptions?: any;
  enableTypeahead?: boolean;
  staffOnly?: boolean;
}