name: Backend Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  POSTGRES_DB: test_cupcake_vanilla_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DJANGO_SETTINGS_MODULE: cupcake_vanilla.settings.test
  INTEGRATION_TEST_MODE: true

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          path: frontend

      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.BACKEND_REPO }}
          token: ${{ secrets.BACKEND_ACCESS_TOKEN }}
          path: backend

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('backend/poetry.lock') }}

      - name: Install Backend Dependencies
        working-directory: backend
        run: |
          poetry install --no-interaction

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: |
          npm ci

      - name: Wait for Services
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 2
          done
          echo "PostgreSQL is ready!"
          
          echo "Waiting for Redis..."
          until redis-cli -h localhost -p 6379 ping; do
            echo "Redis is unavailable - sleeping"
            sleep 2
          done
          echo "Redis is ready!"

      - name: Set up Backend Database
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_cupcake_vanilla_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          poetry run python manage.py migrate
          poetry run python manage.py collectstatic --noinput
          poetry run python manage.py loaddata fixtures/test_data.json || true

      - name: Start Backend Server
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_cupcake_vanilla_db
          REDIS_URL: redis://localhost:6379/0
          DEBUG: false
          ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          poetry run python manage.py runserver 8000 &
          echo $! > backend_pid.txt
          sleep 10

      - name: Wait for Backend to be Ready
        run: |
          echo "Waiting for backend to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:8000/api/v1/health/ 2>/dev/null; do sleep 2; done'
          echo "Backend is ready!"

      - name: Build Frontend Libraries
        working-directory: frontend
        run: |
          npm run build:libs

      - name: Run Integration Tests
        working-directory: frontend
        env:
          TEST_API_URL: http://localhost:8000/api/v1
          TEST_TIMEOUT: 30000
          INTEGRATION_TEST_USER: integration_test@example.com
          INTEGRATION_TEST_PASSWORD: ${{ secrets.INTEGRATION_TEST_PASSWORD }}
        run: |
          npm run test:integration

      - name: Run Service Coverage Tests
        working-directory: frontend
        env:
          TEST_API_URL: http://localhost:8000/api/v1
        run: |
          npm run test:integration:coverage

      - name: Generate Integration Test Report
        working-directory: frontend
        if: always()
        run: |
          npm run test:integration:report

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            frontend/integration-test-results/
            frontend/coverage/
          retention-days: 7

      - name: Upload Backend Logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: backend-logs
          path: backend/logs/
          retention-days: 3

      - name: Cleanup
        if: always()
        working-directory: backend
        run: |
          if [ -f backend_pid.txt ]; then
            kill $(cat backend_pid.txt) || true
          fi

      - name: Report Test Results to PR
        uses: dorny/test-reporter@v1
        if: github.event_name == 'pull_request'
        with:
          name: Integration Test Results
          path: frontend/integration-test-results/junit.xml
          reporter: java-junit
          fail-on-error: true

  security-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Security Audit
        working-directory: .
        run: |
          npm audit --audit-level=high
          
      - name: Check for Hardcoded Secrets
        run: |
          if grep -r "password.*=" . --include="*.ts" --include="*.js" | grep -v "test" | grep -v "spec"; then
            echo "Found potential hardcoded credentials"
            exit 1
          fi